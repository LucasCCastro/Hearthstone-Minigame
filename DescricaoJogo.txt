Jogo: Hearthstone Minigame
Instruções:
- O deck da parte superior da janela e o deck do jogador 1. O da parte inferior o do jogador 2.
- O jogador 1 sempre joga primeiro
- Na sua vez, o jogador pode tanto jogar novas cartas (caso tenha mana suficiente), como utilizar suas cartas em campo para atacar algum alvo
- O jogador que tem sua vida menor ou igual a zero, eh o derrotado
- O sistema verifica quem ganhou a partida depois de cada ataque realizado
- Para iniciar uma nova partida e necessario clicar o botao "restart"
- Quando a vida de um jogador eh reduzida a zero ou menos, o jogo termina

Implementacao:
- A lógica do jogo e controlada pela classe "Game".
- A classe "Game" usa as classes "Card" (representa uma carta), "CardDeck" (representa um deck de cartas) e Table(representa as cartas na mesa).
- Todas estas classes são derivadas de "Observer" de maneira que podem ser observadas por componentes de interface com o usuário
- Sempre que sinalizam eventos as classes do jogo enviam uma instancia de "GameEvent" p/a interface que as estiver observando. 
- Instancias de "GameEvent" indicam a quem o evento se destina (Target) e qual a ação (Action) mais um parametro extra (String)
- A interface com o usuário tem como classe principal "GameWindow".
- Para exibir as cartas existe o "CardView" (capaz de exibir uma carta)
- Para exibir um deck existe o "DeckView" (capaz de exibir um deck de cartas)
- Para exibir um deck existe o "TableView" (capaz de exibir as cartas da mesa)
- "GameWindow", "DeckView" e "TableView" são observadores de "Game", "CardDeck" e "Table", respectivamente
- "CardView" é mais complexo: observa "Card" (para exibir a imagem correta) e
- é observado por "DeckView" (para selecionar a carta clicada). Note que para "DeckView" observar "CardView" usa-se um
- interface específico chamado "CardSelected". Este é um relacionamento entre componentes de interface pois um "DeckView" e uma - colecao de "CardViews". Então quando uma carta é clicada ela notifica seu observador ("DeckView") que anota a carta selecionada
- e aciona o método "play" de "Game". 
- A classe "ImageFactory" garante que só as imagens das cartas usadas são realmente carregadas para a memória e que uma mesma -
- imagem não é carregada duas vezes.

